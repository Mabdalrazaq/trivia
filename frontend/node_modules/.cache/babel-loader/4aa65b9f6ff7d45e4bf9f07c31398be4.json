{"ast":null,"code":"var _jsxFileName = \"C:\\\\coding\\\\webdevelopment\\\\udacity\\\\2)api\\\\trivia\\\\frontend\\\\src\\\\components\\\\QuestionView.js\";\nimport React, { Component } from 'react';\nimport serverBaseUrl from '../serverBaseUrl';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getAll = () => {\n      this.setState({\n        searchTerm: ''\n      });\n      this.getQuestions();\n    };\n\n    this.getQuestions = () => {\n      $.ajax({\n        url: serverBaseUrl + `/questions?page=${this.state.page}&search_term=${this.state.searchTerm}&current_category=${this.state.currentCategory}`,\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            categories: result.categories,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          alert(JSON.stringify(error));\n          return;\n        }\n      });\n    };\n\n    this.getByCategory = id => {\n      $.ajax({\n        url: serverBaseUrl + `/categories/${id}/questions`,\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      $.ajax({\n        url: serverBaseUrl + `/questions`,\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category,\n            searchTerm: searchTerm\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: serverBaseUrl + `/questions/${id}`,\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions. Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null,\n      searchTerm: ''\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push( /*#__PURE__*/React.createElement(\"span\", {\n        key: i,\n        className: `page-num ${i === this.state.page ? 'active' : ''}`,\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"categories-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      onClick: () => {\n        this.getQuestions();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }, \"Categories\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, this.state.categories.map(category => /*#__PURE__*/React.createElement(\"li\", {\n      key: category.id,\n      onClick: () => {\n        this.getByCategory(category.id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }\n    }, category.type, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"category\",\n      src: `${category.type}.svg`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questions-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }, \"Questions\"), this.state.questions.map(q => /*#__PURE__*/React.createElement(Question, {\n      key: q.id,\n      question: q.question,\n      answer: q.answer,\n      category: this.state.categories.find(cat => cat.id === q.category).type,\n      difficulty: q.difficulty,\n      questionAction: this.questionAction(q.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    }, this.createPagination())));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["C:/coding/webdevelopment/udacity/2)api/trivia/frontend/src/components/QuestionView.js"],"names":["React","Component","serverBaseUrl","Question","Search","$","QuestionView","constructor","getAll","setState","searchTerm","getQuestions","ajax","url","state","page","currentCategory","type","success","result","questions","totalQuestions","total_questions","categories","current_category","error","alert","JSON","stringify","getByCategory","id","submitSearch","dataType","contentType","data","xhrFields","withCredentials","crossDomain","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","console","log","map","category","q","question","answer","find","cat","difficulty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport serverBaseUrl from '../serverBaseUrl';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor(){\n    super();\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null,\n      searchTerm:''\n    }\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getAll=()=>{\n    this.setState({searchTerm:''})\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    $.ajax({\n      url: serverBaseUrl+`/questions?page=${this.state.page}&search_term=${this.state.searchTerm}&current_category=${this.state.currentCategory}`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        alert(JSON.stringify(error))\n        return;\n      }\n    })\n  }\n\n  selectPage(num) {\n    this.setState({page: num}, () => this.getQuestions());\n  }\n\n  createPagination(){\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {this.selectPage(i)}}>{i}\n        </span>)\n    }\n    return pageNumbers;\n  }\n\n  getByCategory= (id) => {\n    $.ajax({\n      url: serverBaseUrl+`/categories/${id}/questions`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitSearch = (searchTerm) => {\n    $.ajax({\n      url: serverBaseUrl+`/questions`, //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({searchTerm: searchTerm}),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category,\n          searchTerm:searchTerm })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  questionAction = (id) => (action) => {\n    if(action === 'DELETE') {\n      if(window.confirm('are you sure you want to delete the question?')) {\n        $.ajax({\n          url: serverBaseUrl+`/questions/${id}`, //TODO: update request URL\n          type: \"DELETE\",\n          success: (result) => {\n            this.getQuestions();\n          },\n          error: (error) => {\n            alert('Unable to load questions. Please try your request again')\n            return;\n          }\n        })\n      }\n    }\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"question-view\">\n        <div className=\"categories-list\">\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\n          <ul>\n            {this.state.categories.map(category => (\n              <li key={category.id} onClick={() => {this.getByCategory(category.id)}}>\n                {category.type}\n                <img className=\"category\" src={`${category.type}.svg`}/>\n              </li>\n            ))}\n          </ul>\n          <Search submitSearch={this.submitSearch}/>\n        </div>\n        <div className=\"questions-list\">\n          <h2>Questions</h2>\n          {this.state.questions.map(q => (\n            <Question\n              key={q.id}\n              question={q.question}\n              answer={q.answer}\n              category={this.state.categories.find(cat=>cat.id===q.category).type} \n              difficulty={q.difficulty}\n              questionAction={this.questionAction(q.id)}\n            />\n          ))}\n          <div className=\"pagination-menu\">\n            {this.createPagination()}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}